#!/usr/bin/perl
use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;

my $epsilon=1.0;
GetOptions("e=f" => \$epsilon) || die("Usage: $0 [-e num] [input_mapfile]\n");

# Hash arrays of known sites and their connections
my %Node;
my %Conn;

# Start the dot output
open(my $OUT, "|-", "dot -Tpng -o uucp.png") || die("dot pipe failed: $!\n");
print($OUT "strict graph {\n");
print($OUT "  epsilon=$epsilon;\n");

my $IN;
if (@ARGV == 1) {
  open($IN, "<", $ARGV[0]) || die("open $ARGV[0] failed: $!\n");
} else {
  open($IN, "<", "uucp.map") || die("open uucp.map failed: $!\n");
}

while (<$IN>) {
  chomp;

  # Find a connection entry
  if (m{(^[A-Za-z0-9]\S*)\s+(.*)}) {
    my ($src, $dstlist)= ($1, $2);
    $Node{$src}=1;
    
    # Lose () and whitepace on the dstlist
    $dstlist=~ s{\s}{}g;
    $dstlist=~ s{\([^)]+\)}{}g;

    # Now split and print out the dot lines
    foreach my $dst (split(/,/, $dstlist)) {
      $Conn{$src}{$dst}=1;
    }
  }
}
close($IN);

# Go through the Conn hash. Only print out connections where
# both sides are represented as a source. This removes nodes
# which don't yet exist
foreach my $src (keys(%Conn)) {
  foreach my $dst (keys(%{$Conn{$src}})) {
      next if (!defined($Node{$dst}));
      print($OUT "  \"$src\" -- \"$dst\"\n");

      # Warn if no reverse link, we need it for pathalias
      print(STDERR "pathalias: need $dst\t$src(DIRECT)\n")
      		if (!defined($Conn{$dst}{$src}));
  }
}

# End the dot output
print($OUT "}\n");
close($OUT);
exit(0);
